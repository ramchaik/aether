// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.1
// source: project.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "project";

export enum ProjectStatus {
  NOT_LIVE = 0,
  LIVE = 1,
  DEPLOYING = 2,
  UNRECOGNIZED = -1,
}

export function projectStatusFromJSON(object: any): ProjectStatus {
  switch (object) {
    case 0:
    case "NOT_LIVE":
      return ProjectStatus.NOT_LIVE;
    case 1:
    case "LIVE":
      return ProjectStatus.LIVE;
    case 2:
    case "DEPLOYING":
      return ProjectStatus.DEPLOYING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProjectStatus.UNRECOGNIZED;
  }
}

export function projectStatusToJSON(object: ProjectStatus): string {
  switch (object) {
    case ProjectStatus.NOT_LIVE:
      return "NOT_LIVE";
    case ProjectStatus.LIVE:
      return "LIVE";
    case ProjectStatus.DEPLOYING:
      return "DEPLOYING";
    case ProjectStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UpdateProjectStatusRequest {
  projectId: string;
  status: ProjectStatus;
}

export interface UpdateProjectStatusResponse {
  success: boolean;
  message: string;
}

function createBaseUpdateProjectStatusRequest(): UpdateProjectStatusRequest {
  return { projectId: "", status: 0 };
}

export const UpdateProjectStatusRequest = {
  encode(message: UpdateProjectStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectId !== "") {
      writer.uint32(10).string(message.projectId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectId = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectStatusRequest {
    return {
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
      status: isSet(object.status) ? projectStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdateProjectStatusRequest): unknown {
    const obj: any = {};
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    if (message.status !== 0) {
      obj.status = projectStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectStatusRequest>, I>>(base?: I): UpdateProjectStatusRequest {
    return UpdateProjectStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectStatusRequest>, I>>(object: I): UpdateProjectStatusRequest {
    const message = createBaseUpdateProjectStatusRequest();
    message.projectId = object.projectId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdateProjectStatusResponse(): UpdateProjectStatusResponse {
  return { success: false, message: "" };
}

export const UpdateProjectStatusResponse = {
  encode(message: UpdateProjectStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProjectStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProjectStatusResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: UpdateProjectStatusResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateProjectStatusResponse>, I>>(base?: I): UpdateProjectStatusResponse {
    return UpdateProjectStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateProjectStatusResponse>, I>>(object: I): UpdateProjectStatusResponse {
    const message = createBaseUpdateProjectStatusResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export type ProjectServiceService = typeof ProjectServiceService;
export const ProjectServiceService = {
  updateProjectStatus: {
    path: "/project.ProjectService/UpdateProjectStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateProjectStatusRequest) =>
      Buffer.from(UpdateProjectStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateProjectStatusRequest.decode(value),
    responseSerialize: (value: UpdateProjectStatusResponse) =>
      Buffer.from(UpdateProjectStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateProjectStatusResponse.decode(value),
  },
} as const;

export interface ProjectServiceServer extends UntypedServiceImplementation {
  updateProjectStatus: handleUnaryCall<UpdateProjectStatusRequest, UpdateProjectStatusResponse>;
}

export interface ProjectServiceClient extends Client {
  updateProjectStatus(
    request: UpdateProjectStatusRequest,
    callback: (error: ServiceError | null, response: UpdateProjectStatusResponse) => void,
  ): ClientUnaryCall;
  updateProjectStatus(
    request: UpdateProjectStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateProjectStatusResponse) => void,
  ): ClientUnaryCall;
  updateProjectStatus(
    request: UpdateProjectStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateProjectStatusResponse) => void,
  ): ClientUnaryCall;
}

export const ProjectServiceClient = makeGenericClientConstructor(
  ProjectServiceService,
  "project.ProjectService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProjectServiceClient;
  service: typeof ProjectServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
