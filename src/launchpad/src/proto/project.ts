// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.19.1
// source: project.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "project";

export interface SaveProjectUrlRequest {
  projectUrl: string;
  projectId: string;
}

export interface SaveProjectUrlResponse {
  success: boolean;
  message: string;
}

function createBaseSaveProjectUrlRequest(): SaveProjectUrlRequest {
  return { projectUrl: "", projectId: "" };
}

export const SaveProjectUrlRequest = {
  encode(message: SaveProjectUrlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.projectUrl !== "") {
      writer.uint32(10).string(message.projectUrl);
    }
    if (message.projectId !== "") {
      writer.uint32(18).string(message.projectId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SaveProjectUrlRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveProjectUrlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.projectUrl = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.projectId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveProjectUrlRequest {
    return {
      projectUrl: isSet(object.projectUrl) ? globalThis.String(object.projectUrl) : "",
      projectId: isSet(object.projectId) ? globalThis.String(object.projectId) : "",
    };
  },

  toJSON(message: SaveProjectUrlRequest): unknown {
    const obj: any = {};
    if (message.projectUrl !== "") {
      obj.projectUrl = message.projectUrl;
    }
    if (message.projectId !== "") {
      obj.projectId = message.projectId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveProjectUrlRequest>, I>>(base?: I): SaveProjectUrlRequest {
    return SaveProjectUrlRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveProjectUrlRequest>, I>>(object: I): SaveProjectUrlRequest {
    const message = createBaseSaveProjectUrlRequest();
    message.projectUrl = object.projectUrl ?? "";
    message.projectId = object.projectId ?? "";
    return message;
  },
};

function createBaseSaveProjectUrlResponse(): SaveProjectUrlResponse {
  return { success: false, message: "" };
}

export const SaveProjectUrlResponse = {
  encode(message: SaveProjectUrlResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SaveProjectUrlResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveProjectUrlResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveProjectUrlResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SaveProjectUrlResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveProjectUrlResponse>, I>>(base?: I): SaveProjectUrlResponse {
    return SaveProjectUrlResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveProjectUrlResponse>, I>>(object: I): SaveProjectUrlResponse {
    const message = createBaseSaveProjectUrlResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export type ProjectServiceService = typeof ProjectServiceService;
export const ProjectServiceService = {
  saveProjectUrl: {
    path: "/project.ProjectService/SaveProjectUrl",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SaveProjectUrlRequest) => Buffer.from(SaveProjectUrlRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SaveProjectUrlRequest.decode(value),
    responseSerialize: (value: SaveProjectUrlResponse) => Buffer.from(SaveProjectUrlResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SaveProjectUrlResponse.decode(value),
  },
} as const;

export interface ProjectServiceServer extends UntypedServiceImplementation {
  saveProjectUrl: handleUnaryCall<SaveProjectUrlRequest, SaveProjectUrlResponse>;
}

export interface ProjectServiceClient extends Client {
  saveProjectUrl(
    request: SaveProjectUrlRequest,
    callback: (error: ServiceError | null, response: SaveProjectUrlResponse) => void,
  ): ClientUnaryCall;
  saveProjectUrl(
    request: SaveProjectUrlRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SaveProjectUrlResponse) => void,
  ): ClientUnaryCall;
  saveProjectUrl(
    request: SaveProjectUrlRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SaveProjectUrlResponse) => void,
  ): ClientUnaryCall;
}

export const ProjectServiceClient = makeGenericClientConstructor(
  ProjectServiceService,
  "project.ProjectService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ProjectServiceClient;
  service: typeof ProjectServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
