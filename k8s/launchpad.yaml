---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: launchpad-sa
  namespace: aether
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: service-reader
  namespace: aether
rules:
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-services
  namespace: aether
subjects:
  - kind: ServiceAccount
    name: launchpad-sa
roleRef:
  kind: Role
  name: service-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-ip-config
  namespace: aether
data:
  PROXY_IP: ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: launchpad-deployment
  namespace: aether
  annotations:
    reloader.stakater.com/auto: "true" # Enable reloader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: launchpad-app
  template:
    metadata:
      labels:
        app: launchpad-app
      annotations:
        reloader.stakater.com/match: "proxy-ip-config" # Watch for changes in this ConfigMap
    spec:
      nodeSelector:
        node-group: general
      serviceAccountName: launchpad-sa
      initContainers:
        - name: migrate-db
          image: vsramchaik/aether-launchpad:latest
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: db-url
                  key: DATABASE_URL
          command:
            - "sh"
            - "-c"
            - |
              pnpm run migrate
              echo "Drizzle migrations applied successfully."
        - name: wait-for-proxy
          image: bitnami/kubectl:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true; do
                PROXY_IP=$(kubectl get svc proxy-service -n aether -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                if [ -n "$PROXY_IP" ]; then
                  kubectl create configmap proxy-ip-config --from-literal=PROXY_IP=$PROXY_IP -n aether -o yaml --dry-run=client | kubectl apply -f -
                  break
                fi
                echo "Waiting for PROXY_IP..."
                sleep 10
              done
      containers:
        - name: launchpad-app-container
          image: vsramchaik/aether-launchpad:latest
          ports:
            - containerPort: 8000 # HTTP server
            - containerPort: 50051 # gRPC
          resources:
            requests:
              memory: 500Mi
              cpu: 250m
            limits:
              memory: 750Mi
              cpu: 500m
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: db-url
                  key: DATABASE_URL
            - name: AWS_QUEUE_URL
              value: https://sqs.us-east-1.amazonaws.com/502413910473/aether-queue
            - name: AWS_REGION
              value: us-east-1
            - name: GRPC_SERVER_ADDRESS
              value: "0.0.0.0:50051"
            - name: PROXY_SVC
              valueFrom:
                configMapKeyRef:
                  name: proxy-ip-config
                  key: PROXY_IP
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
            - name: AWS_SESSION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SESSION_TOKEN
            - name: CLERK_PUBLISHABLE_KEY
              valueFrom:
                secretKeyRef:
                  name: clerk-keys
                  key: PUBLIC_CLERK_PUBLISHABLE_KEY
            - name: CLERK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: clerk-keys
                  key: CLERK_SECRET_KEY
---
apiVersion: v1
kind: Service
metadata:
  name: launchpad-service
  namespace: aether
spec:
  selector:
    app: launchpad-app
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8000
    - name: grpc
      protocol: TCP
      port: 50051
      targetPort: 50051
  type: ClusterIP
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: launchpad-hpa
  namespace: aether
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: launchpad-deployment
  minReplicas: 1
  maxReplicas: 1
  targetCPUUtilizationPercentage: 50
